#!/usr/bin/env python

"""
Code copier for South 2

As South 2 is a backport of the migration code from Django 1.7, we don't
want to have too much of a maintentance overhead when making changes and
bugfixes; thus, South 2 is considered a derived version of that code,
and some of it is copied directly over with minor transformations.

This file handles copying the code out of a Django development tree,
making any necessary transforms, and then writing it out to the South 2
development tree.

I know this seems a bit weird. Don't judge me. It's either this or manually
committing every fix twice.
"""

import os
import sys
import re

files = {
    "south/autodetector.py": "django/db/migrations/autodetector.py",
    "south/executor.py": "django/db/migrations/executor.py",
    "south/graph.py": "django/db/migrations/graph.py",
    "south/loader.py": "django/db/migrations/loader.py",
    "south/migration.py": "django/db/migrations/migration.py",
    "south/optimizer.py": "django/db/migrations/optimizer.py",
    "south/questioner.py": "django/db/migrations/questioner.py",
    "south/recorder.py": "django/db/migrations/recorder.py",
    "south/state.py": "django/db/migrations/state.py",
    "south/writer.py": "django/db/migrations/writer.py",
    "south/operations/__init__.py": "django/db/migrations/operations/__init__.py",
    "south/operations/base.py": "django/db/migrations/operations/base.py",
    "south/operations/models.py": "django/db/migrations/operations/models.py",
    "south/operations/fields.py": "django/db/migrations/operations/fields.py",
    "south/operations/special.py": "django/db/migrations/operations/special.py",
    "south/schema/__init__.py": "django/db/backends/schema.py",
    "south/schema/postgresql.py": "django/db/backends/postgresql_psycopg2/schema.py",
    "south/schema/mysql.py": "django/db/backends/mysql/schema.py",
    "south/schema/sqlite3.py": "django/db/backends/sqlite3/schema.py",
    "south/schema/oracle.py": "django/db/backends/oracle/schema.py",
    "south/management/commands/makemigrations.py": "django/core/management/commands/makemigrations.py",
    "south/management/commands/migrate.py": "django/core/management/commands/migrate.py",
    "south/management/commands/sqlmigrate.py": "django/core/management/commands/sqlmigrate.py",
    "south/management/commands/syncdb.py": "django/core/management/commands/syncdb.py",
    "tests/schema/__init__.py": "tests/schema/__init__.py",
    "tests/schema/models.py": "tests/schema/models.py",
    "tests/schema/tests.py": "tests/schema/tests.py",
    "tests/migrations/__init__.py": "tests/migrations/__init__.py",
    "tests/migrations/models.py": "tests/migrations/models.py",
    "tests/migrations/test_base.py": "tests/migrations/test_base.py",
    "tests/migrations/test_graph.py": "tests/migrations/test_graph.py",
}

transforms = {
    "__all__": {
        "^from django.utils.datastructures import OrderedSet": "from south.datastructures import OrderedSet",
        "^from django.db.backends.utils import": "from django.db.backends.util import",
        "^from django.core.apps import AppCache": "from south.app_cache import AppCache",
        "^from django.core.apps import app_cache": "from south.app_cache import app_cache",
        "^from django.core.apps.cache import AppCache": "from south.app_cache import AppCache",
        "^from django.db.backends.schema import": "from south.schema import",
        "from django.db.migrations import operations": "from south import operations",
        r"^from django.db.migrations.(\w+) import": r"from south.\1 import",
    }
}


def main(source, destination=None):
    """
    Copies and transforms code.
    """

    if destination is None:
        destination = os.path.dirname(__file__)

    for dfile, sfile in sorted(files.items()):
        # read source file
        with open(os.path.join(source, sfile), "r") as fh:
            contents = fh.read()
        # Run transforms
        file_transforms = dict(transforms.get("__all__", {}))
        file_transforms.update(transforms.get(dfile, {}))
        new_contents = ""
        for line in contents.split("\n"):
            for tfrom, tto in file_transforms.items():
                line = re.sub(tfrom, tto, line)
            new_contents += line + "\n"
        # Make sure there's only one newline at the end of the file
        while new_contents.endswith("\n\n"):
            new_contents = new_contents[:-1]
        # Write destination file w/header
        with open(os.path.join(destination, dfile), "w") as fh:
            fh.write("# Autogenerated from Django's %s - do not edit\n\n" % sfile)
            fh.write(new_contents)
        print "Wrote %s" % dfile


if __name__ == "__main__":
    # Check there's a source arg
    if len(sys.argv) != 2:
        print "Usage: copy-code.py /path/to/django-tree"
        sys.exit(1)
    # Check it's a django tree root
    source = sys.argv[1]
    if not os.path.isdir(source):
        print "Specified source directory is not a directory!"
        sys.exit(1)
    if not (
      os.path.isdir(os.path.join(source, "django")) and
      os.path.isdir(os.path.join(source, "tests"))):
        print "Specified source directory is not a Django checkout!"
        sys.exit(1)
    # Run copy
    main(source)
